// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Teams", testTeams)
	t.Run("TeamMembers", testTeamMembers)
	t.Run("Users", testUsers)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Teams", testTeamsSoftDelete)
	t.Run("TeamMembers", testTeamMembersSoftDelete)
	t.Run("Users", testUsersSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Teams", testTeamsQuerySoftDeleteAll)
	t.Run("TeamMembers", testTeamMembersQuerySoftDeleteAll)
	t.Run("Users", testUsersQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Teams", testTeamsSliceSoftDeleteAll)
	t.Run("TeamMembers", testTeamMembersSliceSoftDeleteAll)
	t.Run("Users", testUsersSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Teams", testTeamsDelete)
	t.Run("TeamMembers", testTeamMembersDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Teams", testTeamsQueryDeleteAll)
	t.Run("TeamMembers", testTeamMembersQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Teams", testTeamsSliceDeleteAll)
	t.Run("TeamMembers", testTeamMembersSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Teams", testTeamsExists)
	t.Run("TeamMembers", testTeamMembersExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Teams", testTeamsFind)
	t.Run("TeamMembers", testTeamMembersFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Teams", testTeamsBind)
	t.Run("TeamMembers", testTeamMembersBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Teams", testTeamsOne)
	t.Run("TeamMembers", testTeamMembersOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Teams", testTeamsAll)
	t.Run("TeamMembers", testTeamMembersAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Teams", testTeamsCount)
	t.Run("TeamMembers", testTeamMembersCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Teams", testTeamsHooks)
	t.Run("TeamMembers", testTeamMembersHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Teams", testTeamsInsert)
	t.Run("Teams", testTeamsInsertWhitelist)
	t.Run("TeamMembers", testTeamMembersInsert)
	t.Run("TeamMembers", testTeamMembersInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("TeamToUserUsingOwnerUser", testTeamToOneUserUsingOwnerUser)
	t.Run("TeamMemberToUserUsingMemberUser", testTeamMemberToOneUserUsingMemberUser)
	t.Run("TeamMemberToTeamUsingTeam", testTeamMemberToOneTeamUsingTeam)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("TeamToTeamMembers", testTeamToManyTeamMembers)
	t.Run("UserToOwnerUserTeams", testUserToManyOwnerUserTeams)
	t.Run("UserToMemberUserTeamMembers", testUserToManyMemberUserTeamMembers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("TeamToUserUsingOwnerUserTeams", testTeamToOneSetOpUserUsingOwnerUser)
	t.Run("TeamMemberToUserUsingMemberUserTeamMembers", testTeamMemberToOneSetOpUserUsingMemberUser)
	t.Run("TeamMemberToTeamUsingTeamMembers", testTeamMemberToOneSetOpTeamUsingTeam)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("TeamToTeamMembers", testTeamToManyAddOpTeamMembers)
	t.Run("UserToOwnerUserTeams", testUserToManyAddOpOwnerUserTeams)
	t.Run("UserToMemberUserTeamMembers", testUserToManyAddOpMemberUserTeamMembers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Teams", testTeamsReload)
	t.Run("TeamMembers", testTeamMembersReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Teams", testTeamsReloadAll)
	t.Run("TeamMembers", testTeamMembersReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Teams", testTeamsSelect)
	t.Run("TeamMembers", testTeamMembersSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Teams", testTeamsUpdate)
	t.Run("TeamMembers", testTeamMembersUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Teams", testTeamsSliceUpdateAll)
	t.Run("TeamMembers", testTeamMembersSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

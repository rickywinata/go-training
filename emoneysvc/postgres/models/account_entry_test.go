// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAccountEntries(t *testing.T) {
	t.Parallel()

	query := AccountEntries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAccountEntriesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountEntriesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AccountEntries().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountEntriesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountEntrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountEntriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountEntriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AccountEntries().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountEntriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountEntrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountEntriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AccountEntryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AccountEntry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccountEntryExists to return true, but got false.")
	}
}

func testAccountEntriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	accountEntryFound, err := FindAccountEntry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if accountEntryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAccountEntriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AccountEntries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAccountEntriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AccountEntries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccountEntriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountEntryOne := &AccountEntry{}
	accountEntryTwo := &AccountEntry{}
	if err = randomize.Struct(seed, accountEntryOne, accountEntryDBTypes, false, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, accountEntryTwo, accountEntryDBTypes, false, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accountEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccountEntriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accountEntryOne := &AccountEntry{}
	accountEntryTwo := &AccountEntry{}
	if err = randomize.Struct(seed, accountEntryOne, accountEntryDBTypes, false, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, accountEntryTwo, accountEntryDBTypes, false, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accountEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func accountEntryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func accountEntryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountEntry) error {
	*o = AccountEntry{}
	return nil
}

func testAccountEntriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AccountEntry{}
	o := &AccountEntry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, accountEntryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AccountEntry object: %s", err)
	}

	AddAccountEntryHook(boil.BeforeInsertHook, accountEntryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	accountEntryBeforeInsertHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.AfterInsertHook, accountEntryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	accountEntryAfterInsertHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.AfterSelectHook, accountEntryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	accountEntryAfterSelectHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.BeforeUpdateHook, accountEntryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	accountEntryBeforeUpdateHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.AfterUpdateHook, accountEntryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	accountEntryAfterUpdateHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.BeforeDeleteHook, accountEntryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	accountEntryBeforeDeleteHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.AfterDeleteHook, accountEntryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	accountEntryAfterDeleteHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.BeforeUpsertHook, accountEntryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	accountEntryBeforeUpsertHooks = []AccountEntryHook{}

	AddAccountEntryHook(boil.AfterUpsertHook, accountEntryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	accountEntryAfterUpsertHooks = []AccountEntryHook{}
}

func testAccountEntriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountEntriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(accountEntryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountEntryToOneAccountUsingAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AccountEntry
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AccountID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Account().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AccountEntrySlice{&local}
	if err = local.L.LoadAccount(ctx, tx, false, (*[]*AccountEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAccountEntryToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccountEntry
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountEntryDBTypes, false, strmangle.SetComplement(accountEntryPrimaryKeyColumns, accountEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AccountID, x.ID) {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AccountID, x.ID) {
			t.Error("foreign key was wrong value", a.AccountID, x.ID)
		}
	}
}

func testAccountEntryToOneRemoveOpAccountUsingAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccountEntry
	var b Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountEntryDBTypes, false, strmangle.SetComplement(accountEntryPrimaryKeyColumns, accountEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAccount(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAccount(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Account().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Account != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AccountID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AccountEntries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAccountEntriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccountEntriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountEntrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccountEntriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accountEntryDBTypes = map[string]string{`ID`: `uuid`, `AccountID`: `uuid`, `Amount`: `integer`, `BookedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testAccountEntriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(accountEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(accountEntryAllColumns) == len(accountEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAccountEntriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accountEntryAllColumns) == len(accountEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountEntry{}
	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountEntryDBTypes, true, accountEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accountEntryAllColumns, accountEntryPrimaryKeyColumns) {
		fields = accountEntryAllColumns
	} else {
		fields = strmangle.SetComplement(
			accountEntryAllColumns,
			accountEntryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AccountEntrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAccountEntriesUpsert(t *testing.T) {
	t.Parallel()

	if len(accountEntryAllColumns) == len(accountEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AccountEntry{}
	if err = randomize.Struct(seed, &o, accountEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountEntry: %s", err)
	}

	count, err := AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, accountEntryDBTypes, false, accountEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountEntry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountEntry: %s", err)
	}

	count, err = AccountEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
